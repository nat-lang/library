
domain E = {Franny, Zooey, Seymour};

let all = (dom, fn) => dom.foldl(true, (a, x) => a and fn(x));
let some = (dom, fn) => dom.foldl(false, (a, x) => a or fn(x));

let Love : (E, E) -> bool;
let See : (E, E) -> bool;

let who = {(g) => e | e in E};
let loves = {((g) => (x) => (y)) => Love(x,y)};
let saw = {(g) => (x) => (y) => See(x,y)};
let everyone = {(g) => (f) => all(E)(f)};
let nobody = {(g) => (f) => !some(E)(f)};

let ex0 = [nobody [\i [who [saw i]]]];
let ex1 = [everyone [\i [who [loves i]]]];
let ex2 = [[which man] [sold [[which_of [his paintings]]]]];
let ex3 = [[which man] [loves [[which_of [his children]]]]];

// hamblin application
let H_FA = (A, B) => (r) => ({a(b) | a in A(r), b in B(r)});
let H_PA = (binder, expr) => {

};

let interpret = (example) => example.interpret([H_FA, H_PA]);
